# this is an adaptation of Klicky code to override the stock homing behavior
# primary purpose is to ensure we move Z out of the way
# this is the long way around it, but Klicky is known good code, so the 
# adaptations here are, hopefully, low risk.  We'll find out...


############################################################################
# Enable to SET_KINEMATIC_POSITION for Z hop on homing override
############################################################################

[force_move]
enable_force_move: True

#--------------------------------------------------------------------

## [gcode_macro UNSAFE_LOWER_BED]
## description: Force a bed lowering of 5mm even if not homed...
## # this is done during homing to help prevent crashing nozzle
## gcode:
## 
## 	_proc_start function=UNSAFE_LOWER_BED func_params='"{rawparams|string}"'  
## 
## 	{% set z_move = params.Z|int|default(5.0) %}
## 	# need to add a check here to check latest z cmd that was saved to see if
## 	# we're possibly above max z - 5.  If so, adjust to at least 0.5
## 	# this will predicate that on a G0/1 with a Z, need to save it...
## 	# need to ensure that absolute/relative is considered, unless p.th has actual
## 	# regardless, then use that during saving the latest z via svv...
## 	# doign this saving last z heights might impute issues however, with timing.?.
## 	G90
## 	SET_KINEMATIC_POSITION Z=0
## 	G0 Z{z_move} F600
## 	M84
## 
## 	_proc_end function=UNSAFE_LOWER_BED
	
#--------------------------------------------------------------------
[gcode_macro _User_Variables]

variable_verbose:					True	# Enable verbose output
#variable_verbose:					False	# Enable verbose output

###  ~MHz~ NOTE: THESE SPEEDS ARE MULTIPLIED BY 60 BELOW TO ARRIVE AT Fblah RATES.
###  THIS YIELDED SOME REALLY FUKIN OBNOXIOUS Z SPEEDS THAT WERE BOTH TRIPPING FW STEPPER RATE FAILURES
###  AND RESULTING IN PROBE STRIKING THE BED PRETTY HARD WHEN PROBING (ESPECIALLY ON PROBE ACCURACY TEST PROC)

### THESE ARE MM PER SECOND!
variable_xytravel_speed:			250		# how fast all other XY travel moves will be performed when running these macros
variable_ztravel_speed:				50		# how fast all other Z travel moves will be performed when running these macros
variable_z_drop_speed:				5		# how fast the z will move when moving to the z location to clear the probe

variable_safe_z:					15		# Minimum Z for attach/dock and homing functions

# if true it will move the bed away from the nozzle when Z is not homed
variable_enable_z_hop:				True	# set this to false for beds that fall significantly under gravity (almost to Z max)

variable_max_bed_y:					120.0	# maximum Bed size avoids doing a probe_accuracy outside the bed
variable_max_bed_x:					120.0	# maximum Bed size avoids doing a probe_accuracy outside the bed

# location to park the toolhead
variable_park_toolhead:				False	# Enable toolhead parking
variable_parkposition_x:			60		# X toolhead parking position
variable_parkposition_y:			120		# Y toolhead parking position
variable_parkposition_z:			15 		# Z toolhead parking position

variable_version:					1		# Helps users to update the necessary variables, do not update if the variables above are not updated

############################################################################
# Do not modify below
############################################################################
gcode:

	_proc_start function=_User_Variables func_params='"{rawparams|string}"'  

	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}

	# if home_z_height is defined, update safe_z (old versus new variable)
	{% if home_z_height|default(0) != 0 %}
		SET_GCODE_VARIABLE MACRO=_USER_Variables VARIABLE=safe_z VALUE={ home_z_height }
	{% endif %}

	_proc_end function=_User_Variables 

[gcode_macro _check_variables_version]
gcode:

	_proc_start function=_check_variables_version func_params='"{rawparams|string}"'  

	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}

	{% if version != 1 %}
	   { action_raise_error("Please update your variables, there are some functionality changes") }
	{% endif %}

	_proc_end function=_check_variables_version 


############################################################################
# _exit_point - this is common and serves to restore gcode state and other stuffs
############################################################################
[gcode_macro _exit_point]
gcode:

	_proc_start function=_exit_point func_params='"{rawparams|string}"'  

	{% set move_speed = printer["gcode_macro _User_Variables"].xytravel_speed %}
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}			# passed goback from caller

	# mandatory to save the new safe position
	M400	#WAIT FOR MOVES TO FINISH
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={move_speed}		#speed IS MM/S

	_proc_end function=_exit_point 

############################################################################
# _entry_point - this is common and serves to save gcode state and other stuffs
############################################################################
[gcode_macro _entry_point]
gcode:

	_proc_start function=_entry_point func_params='"{rawparams|string}"'  

	{% set function  = 'pre_' ~ params.FUNCTION %}

	# mandatory to save the new safe position
	M400								# WAIT FOR MOVES TO FINISH
	SAVE_GCODE_STATE NAME={function}

	SET_GCODE_OFFSET Z=0				# removes the Z offset for better bed based docking

	go_absolute							# all the macros initially assume absolute positioning

	_proc_end function=_entry_point 


############################################################################
# _Homing_Variables
############################################################################
[gcode_macro _Homing_Variables]
gcode:

	_proc_start function=_Homing_Variables func_params='"{rawparams|string}"'  

	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

	_proc_end function=_Homing_Variables 


############################################################################
# Homing Override
############################################################################
[homing_override]
axes: xyz
gcode:

	_proc_start function=homing_override func_params='"{rawparams|string}"'  
	
#	UNSAFE_LOWER_BED

 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homing"'	# machine state save
	
	{% if params.X|default(-999)|int == 0 %} {% set xreq = 1 %} {% else %} {% set xreq = 0 %} {% endif %}
	{% if params.Y|default(-999)|int == 0 %} {% set yreq = 1 %} {% else %} {% set yreq = 0 %} {% endif %}
	{% if params.Z|default(-999)|int == 0 %} {% set zreq = 1 %} {% else %} {% set zreq = 0 %} {% endif %}
	
	{% set th = printer.toolhead %}
	
	{% if "x" not in th.homed_axes %} {% set xhomed = 0 %} {% else %} {% set xhomed = 1 %} {% endif %}
	{% if "y" not in th.homed_axes %} {% set yhomed = 0 %} {% else %} {% set yhomed = 1 %} {% endif %}
	{% if "z" not in th.homed_axes %} {% set zhomed = 0 %} {% else %} {% set zhomed = 1 %} {% endif %}

	{% if xhomed and yhomed and zhomed and zreq and not xreq and not yreq %}
		say_wait S="Ree Homing Z"
	{% elif xhomed and yhomed and zhomed %}
		say_wait S="Rehoming tool head"
	{% else %}
		say_wait S="Homing tool head"
	{% endif %}

	# collect user state variables
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}

	# Safe Z for travel
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

	#checks if the variable definitions are up to date
	_check_variables_version

	# reset parameters
	{% set home_x, home_y, home_z = False, False, False %}

	# which axes have been requested for homing
	{% if not 'X' in params
		and not 'Y' in params
		and not 'Z' in params %}

		{% set home_x, home_y, home_z = True, True, True %}

	{% else %}
		# Frame mount x-endstop - home Y before X
		{% if 'X' in params %}
			{% set home_x = True %}
		{% endif %}

		{% if 'Y' in params %}
			{% set home_y = True %}
		{% endif %}

		{% if 'Z' in params %}
			{% set home_z = True %}
		{% endif %}

		{% if 'X' in params
		  and 'Y' in params
		  and 'Z' in params %}
			# reset homing state variables
			# if homing all axes
			_Homing_Variables reset=1
		 {% endif %}

	{% endif %}

	_entry_point function=homing_override

	# if Z is not homed, do not move the bed if it goes down
	{% if 'z' not in printer.toolhead.homed_axes %}
			{% if not enable_z_hop %} # Disables safe_z
				{% set safe_z = 0 %}
			{% endif %}
	{% endif %}

	{% if home_z %}
		{% if 'z' in printer.toolhead.homed_axes %}
			{% if printer.toolhead.position.z < safe_z %}
				{% if verbose %} M118 Z too low, performing ZHOP {% endif %}
				G0 Z{safe_z} F{z_drop_feedrate}
			{% endif %}
		{% else %}
			{% if verbose %} M118 Z not homed, forcing full G28 {% endif %}
			SET_KINEMATIC_POSITION X=0 Y=0 Z=0
			G0 Z{safe_z} F{z_drop_feedrate}
			{% set home_x, home_y, home_z = True, True, True %}
		{% endif %}
	{% endif %}

	# Home x
	{% if home_x %}
		{% if verbose %} M118 Homing X {% endif %}
		G28 X0
	{% endif %}

	# Home y
	{% if home_y %}
		{% if verbose %} M118 Homing Y {% endif %}
		G28 Y0
	{% endif %}
	
	# Home z
	{% if home_z %}
		{% if verbose %} M118 Homing Z {% endif %}
		_Home_Z
	{% endif %}

	# park the toolhead
	_Park_Toolhead

	_exit_point function=homing_override
 
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homed"'	# machine state save
	
	{% if xhomed and yhomed and zhomed and zreq and not xreq and not yreq %}
		say_wait S="Z ree homed"
	{% elif xhomed and yhomed and zhomed %}
		say_wait S="Tool Head rehomed"
	{% else %}
		say_wait S="Tool Head homed"
	{% endif %}

	_proc_end function=homing_override 
	
############################################################################
# Home Z Routine
############################################################################

[gcode_macro _Home_Z]
gcode:

	_proc_start function=_Home_Z func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homing"'	# machine state save
	
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	_entry_point function=Home_Z

	# if x and y are not homed yet, raise error
	{% if not 'xy' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
		{% if not 'z' in printer.toolhead.homed_axes %}
			{% if verbose %} M118 Resetting Z position to zero {% endif %}
			SET_KINEMATIC_POSITION Z=0
		{% endif %}

		# Move tool to safe homing position and home Z axis
		# location of z endstop
		G0 X{z_endstop_x} Y{z_endstop_y} F{xytravel_feedrate}
		G28 Z0
		G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_exit_point function=Home_Z
	
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homed"'	# machine state save

	_proc_end function=_Home_Z 


############################################################################
# Park Toolhead Routine
############################################################################
[gcode_macro _Park_Toolhead]
gcode:

	_proc_start function=_Park_Toolhead func_params='"{rawparams|string}"'  

	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	_entry_point function=Park_Toolhead

	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
		say_wait S="Parking Tool Head"
		{% if verbose %} M118 Parking Toolhead {% endif %}
		G0 X{parkposition_x} Y{parkposition_y} F{xytravel_feedrate}
		G0 Z{parkposition_z} F{ztravel_feedrate}
		say_wait S="Tool Head Parked"
	{% else %}
		# say_wait S="Parking Disabled"
		{% if verbose %} M118 Toolhead Parking Disabled... {% endif %}
	{% endif %}

	_exit_point function=Park_Toolhead

	_proc_end function=_Park_Toolhead 

#--------------------------------------------------------------------



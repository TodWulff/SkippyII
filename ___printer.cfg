########################################
# SKIPPY Primary Printer Config File
########################################

[delayed_gcode ____printer_config_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=____printer_config_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> ____printer.cfg Loaded. <<<
	{% endif %}
	_proc_end function=____printer_config_loaded 

[delayed_gcode startup_heater_restoration]
# ok, added code to support resetting temps if a restart while hot is commanded at reset :) finally...
initial_duration: 0.5
gcode:
	_proc_start function=startup_heater_restoration func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"early_start"'	# machine state save

	{% if svv.boot_extruder_temp %}
		#SET_HEATER_TEMPERATURE HEATER=extruder TARGET={svv.boot_extruder_temp}
		M104 S{svv.boot_extruder_temp}
		M118 Auto-Heating Extruder @ Boot to {svv.boot_extruder_temp}°C		# advise user
		save_variable VARIABLE=boot_extruder_temp VALUE=0					# and clear val/flag for no-heat on followon resets
	{% endif %}

	{% if svv.boot_heater_bed_temp %}
		#SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={svv.boot_heater_bed_temp}
		M140 S{svv.boot_heater_bed_temp}
		M118 Auto-Heating Bed @ Boot to {svv.boot_heater_bed_temp}°C		# advise user
		save_variable VARIABLE=boot_heater_bed_temp VALUE=0					# and clear val/flag for no-heat on followon resets
	{% endif %}
	
	_proc_end function=startup_heater_restoration 

[gcode_macro _info_printer]

#to do

gcode:
	say_wait S="Woo Who?"


#--------------------------------------------------------------------
[gcode_macro _printer_vars]
# prototype: {% if printer["gcode_macro _printer_vars"].ptr_verb_debug %}  M118 >>> _linadv_module_start Start <<< {% endif %}

variable_ptr_verb_error:			1 	# set to 0 to mute error reporting (um, errors. lol)
variable_ptr_verb_info:				0   # set to 0 to mute info reporting (has data)
variable_ptr_verb_status:			0   # set to 0 to mute status reporting (useful modes, update, etc.)
variable_ptr_verb_debug:			0   # set to 0 to mute debugs stuffs i added
variable_ptr_verb_modload:			0   # set to 0 to mute debugs stuffs i added

variable_ptr_verb_cfgload:			0   # enable to see which cfg files loading and their load sequence

variable_ptr_verb_speech:			0   # set to 0 to mute speech feedback stuffs i added 

# these are for trace debug purposes
variable_ptr_verb_codeflow:			0   # set to 0 to mute debugs stuffs I added (proc entry/exit)
# these are relevant only when the above is set to 1
variable_log_trace_to_file:			0	# set to 1 to log to the trace_debug.log file, else log to console
variable_show_proc_exit:			1	# 1 enables display of nesting depth backtics on procedure exit
# this is relevant only when the above is set to 1
variable_show_proc_exit_details:	1	# previous needs to be enabled for this to work, 1 displays function on exit, if passed

variable_halo_flash_fast_time:		0.1	# that's as fast as it gets with a delayed gcode being recursive
variable_halo_flash_slow_time:		0.8	

variable_max_bed_x:	120
variable_max_bed_y:	120
variable_max_bed_z:	120

# similar module-specific verbosity settings contained in file | proc:
	# _debug_macros.cfg | _debug_tools_vars
	# _ercf_software.cfg | ercf_var
	# _nozzle_scrub.cfg | _scrub_vars
	# _led_effects.cfg | _ledeff_vars
	# _gcode_processing.cfg | _gcodeproc_vars
	# _linear_advance.cfg | _linadv_vars

variable_pause_retract_default:		1.0	# default retract amount at pause - is also default deretract amount at resume


gcode:
	#there is none, this is for broad variable access

#--------------------------------------------------------------------

# having to add this, at least temporarily, as skippyII doesn't heat enough unenclosed with a 60W heater.
[verify_heater heater_bed]
#max_error: 120
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 120 # seconds
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.

#--------------------------------------------------------------------

[pause_resume]
recover_velocity: 200.0
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

#--------------------------------------------------------------------

[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode:
  CANCEL_PRINT	# ... Don't know how I feel about this.  Might be a fixme for a 'moar elegint solushun'

#--------------------------------------------------------------------

[display_status]
# enables Klipper organic M73 and M117 support

#--------------------------------------------------------------------

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 5000
max_accel_to_decel: 2500
square_corner_velocity: 5
max_z_velocity: 30
max_z_accel: 100

#--------------------------------------------------------------------
## nix'd this in favor of the code in _auto_off.cfg
### [idle_timeout] 
### timeout: 18000  # in seconds - 18000= 5hr, 3600 = 1hr
### gcode:
### 	# M84  #<-- why?? printer shutdown will do this...
### 	say_wait S="Idle period limit reached. Heaters off. Shutting down printer in 60 Seconds."
### 	TURN_OFF_HEATERS
### ## TODO:  add dly for HE to cool to some threshold (HeatCreep/cooling duct melt Prevention)
### 	UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

#--------------------------------------------------------------------
# Includes
#--------------------------------------------------------------------


# [include __WIP_homing_override.cfg]
# [include __WIP_klicky-probe.cfg]
# [include _WIP_nozzle_scrub.cfg]

## Load Order IS a thing - I have proven it (to myself).  Just know that...

[include ___startup_autoexec.cfg]	# this should be the first include...
[include _shell_command.cfg]
[include ___klipper_mcu.cfg]
[include _auto_off.cfg]
[include __mcus.cfg]
[include _pico_oled.cfg]
[include __homing_override.cfg]
[include __bed.cfg]
[include __fans.cfg]
[include __print_start.cfg]
[include __print_pause.cfg]
[include __print_resume.cfg]
[include __print_cancel.cfg]
[include __print_end.cfg]
[include _park_procs.cfg]
[include _btt_sfs.cfg]
[include _hw_retract.cfg]
[include _git_repo_ops.cfg]
[include _bed_screws.cfg]
[include _bed_screws.cfg]
[include _camera.cfg]
[include _sensors.cfg]
[include _io_defs.cfg]
[include _dotstar_leds.cfg]
[include _servos.cfg]
[include _persistent_variables.cfg]
[include _console_response.cfg]
[include _gcode_macros.cfg]
[include _gcode_processing.cfg]
[include _linear_advance.cfg]
[include _exclude_object.cfg]
[include _corexy_speed_test.cfg]
[include _user_interaction.cfg] # <-- chain loads _ui_test
[include _debug_tools.cfg]
#[include _trace_debug.cfg]
#[include _gmove_debug.cfg]
#[include _svv_debug.cfg]
#[include _state_debug.cfg]
[include _dynamics_debug.cfg]
[include _temp_capture.cfg]
[include _m300_sounds.cfg]		 # <-- chain loads _gcode_songs
[include _steppers_drivers.cfg]
[include _klicky.cfg]
[include _nozzle_scrub.cfg]

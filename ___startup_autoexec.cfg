#############################################################################
#   Startup Autoexec Procs
#############################################################################

[delayed_gcode _startup_autoexec_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_startup_autoexec_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> ___startup_autoexec.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_startup_autoexec_loaded 

[delayed_gcode _starting_up_tts]
initial_duration: 3
gcode:
	_proc_start function=_startup_autoexec_loaded func_params='"{rawparams|string}"'  
	
#	say_wait S="Hello, I am Skippy the 2nd."
#	say_wait S="Hello, I am Skippy the 2nd, and happy to be of service."
#	say_wait S="Hello, I am Skippy the 2nd, and happy to be of service to my benevolent master."
#	say_wait S="Printer Starting."
#	say_wait S="Somebody set up us the bomb."
#	say_wait S="We get Signal."
#	say_wait S="How are you gentlemen?"
	say_wait S="All your base are belong to us."
#	say_wait S="You have no chance to survive."
#	say_wait S="Make your time."

	_proc_end function=_startup_autoexec_loaded 


[delayed_gcode clear_display]			# description: Delayed macro to be called to clear the M117 portion of the display
gcode:
  M117
  
#----------------------------------------------------------------------------------

[delayed_gcode welcome_msg]				# description: Displays 'welcome!' via a M117 call
gcode:
  M117 Welcome!
  UPDATE_DELAYED_GCODE ID=clear_display DURATION=10  # clear display in 10s

#----------------------------------------------------------------------------------

[delayed_gcode _startup_var_init]		# description: initializes schtuffs
initial_duration: 0.1					# run it very quickly after start - other module autostarts are set to 0.5s
gcode:

	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth	VALUE=0			# resets in case printer hung last run and persistent var val is bad
																# this is the first thing to run after klipper is ready, so call organic vs. wrapper
															
	_proc_start function=_startup_var_init func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"initializing"'	# machine state save

	SAVE_VARIABLE VARIABLE=module_ledeff_loaded VALUE=0				# module state initialization
	SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=0				# module state initialization
	SAVE_VARIABLE VARIABLE=module_debug_loaded VALUE=0				# module state initialization
	SAVE_VARIABLE VARIABLE=module_linadv_loaded VALUE=0				# module state initialization
	SAVE_VARIABLE VARIABLE=module_scrub_loaded VALUE=0				# module state initialization
	SAVE_VARIABLE VARIABLE=module_klicky_loaded VALUE=0				# module state initialization
	SAVE_VARIABLE VARIABLE=module_gcodeproc_loaded VALUE=0			# module state initialization
	SAVE_VARIABLE VARIABLE=module_ui_loaded VALUE=0					# module state initialization

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE=0			# stored extruder temp setting initialization
	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE=0			# stored heater bed temp setting initialization
	
	SAVE_VARIABLE VARIABLE=ercf_he_temp_restore_val VALUE=0			# clear ercf temp setting cache

	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0							# init global var
	SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1					# print state initialization
	SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0						# since machine just started, flag a z_axis_cal is not complete
	SAVE_VARIABLE VARIABLE=v0_XXXX_slicer_check VALUE='"NULL"'		# clear SLICER VITALS
	SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'

	SAVE_VARIABLE VARIABLE=ercf_selector_homed	VALUE=0				# Added this state variable during testing of ERCF
	SAVE_VARIABLE VARIABLE=ercf_he_temp_restore_val	VALUE=0
	
	; SAVE_VARIABLE VARIABLE=ercf_gear_direction	VALUE=0				# Added this state variable during testing of ERCF - set by manual_selector code
	; SAVE_VARIABLE VARIABLE=ercf_encoder_count	VALUE=0				# Added this state variable during testing of ERCF - set by encoder sensor gcodes

	# init other values to prevent ambiguous states
	SAVE_VARIABLE VARIABLE=last_chamber_lights_effect	VALUE='"off"'
	SAVE_VARIABLE VARIABLE=last_dash_lights_effect		VALUE='"off"'
	SAVE_VARIABLE VARIABLE=last_ercf_lights_effect		VALUE='"off"'
	SAVE_VARIABLE VARIABLE=last_lcd_lights_effect		VALUE='"off"'
	
	SAVE_VARIABLE VARIABLE=last_layer_chg_msg			VALUE='"NULL"'
	SAVE_VARIABLE VARIABLE=last_lcd_layer_chg_msg		VALUE='"NULL"'
	SAVE_VARIABLE VARIABLE=last_object_printed			VALUE='"NULL"'
	SAVE_VARIABLE VARIABLE=last_restored_gcode_state	VALUE='"NULL"'
	
	SAVE_VARIABLE VARIABLE=current_object_printed		VALUE='"NULL"'
	SAVE_VARIABLE VARIABLE=pause_ercf_error				VALUE=0
	SAVE_VARIABLE VARIABLE=type							VALUE='"NULL"'
	SAVE_VARIABLE VARIABLE=width						VALUE=0
	
	save_variable VARIABLE=total_toolchanges 			VALUE=0

	# and we're init'd
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"initialized"'	# machine state save

	_proc_end function=_startup_var_init 

#----------------------------------------------------------------------------------

[delayed_gcode printer_startup]			# description: Printer Boot 'Autoexec' script
initial_duration: 5.0					# run 2 sec after boot to make sure other modules can load and run their startup procs before this
gcode:

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	######################### debug stuffs
	; {% if svv.module_debug_loaded %} _enable_trace_debug REASON='"Startup Testing"' {% endif %}
	; {% if svv.module_debug_loaded %} _enable_gmove_debug REASON='"Startup Testing"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='"Startup Testing"' {% endif %}

	_proc_start function=printer_startup func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"starting"'		# machine state save

	SAVE_VARIABLE VARIABLE=last_spd_fact VALUE=1.0					# init last speed factor

#	{% if svv.module_ercf_loaded %}
#		_ERCF_SERVO_UP 												# raise the servo arm
#		G4 P250
#		_ERCF_SERVO_UP 												# raise the servo arm
#		G4 P250
#	{% endif %}
#
#	{% if svv.module_ledeff_loaded %}
#		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
#			M118 >>> LED CONTROL: LED_EFFECT <<<
#		{% endif %}
#		STOP_LED_EFFECTS
#		_set_ledeff_mode CHAIN=chamber_lights 	EFFECT=normal 	RESET=1	# uses LED_EFFECTS code
#		_set_ledeff_mode CHAIN=lcd_lights 		EFFECT=normal	RESET=1	# uses LED_EFFECTS code
#		_set_ledeff_mode CHAIN=ercf_lights 		EFFECT=off		RESET=1	# uses LED_EFFECTS code
#		_set_ledeff_mode CHAIN=dash_lights 		EFFECT=off		RESET=1	# uses LED_EFFECTS code
#	{% else %}
#		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
#			M118 >>> LED CONTROL: KLIPPER <<<
#		{% endif %}
#		ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
#		LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
#		ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
#		DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
#	{% endif %}
#
	printer_config_restore			# will pull in updates and restart if needed

	say_wait S="User Modules Loaded."

	UPDATE_DELAYED_GCODE ID=welcome_msg DURATION=5		# display Welcome Msg at startup + 5s

#	snd_PowerOn						# emit power on sound/song
	sng_startup						# play startup song

#	say_wait S="Loading Default Bed Mesh"
#	say S="Loading Default Bed Mesh"
#	BED_MESH_PROFILE LOAD="default"
	
	#ok, added code to support resetting temps if a restart while hot is commanded  :) finally...

	{% if svv.boot_extruder_temp %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={svv.boot_extruder_temp}
		{% if svv.boot_extruder_temp > 1 %}
			# squelch audible alerts if temp is 1 (using that to kick off watercooling subsys)
			M300
			M300
			M300
		{% endif %}
		M118 Auto-Heating Extruder @ Boot to {svv.boot_extruder_temp}°C		# advise user
		save_variable VARIABLE=boot_extruder_temp VALUE=0					# and clear val/flag for no-heat on followon resets
	{% endif %}

	{% if svv.boot_heater_bed_temp %}
		SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={svv.boot_heater_bed_temp}
		M300
		M300
		M300
#		M140 S{svv.boot_heater_bed_temp}										# start heating bed
		M118 Auto-Heating Bed @ Boot to {svv.boot_heater_bed_temp}°C			# advise user
		save_variable VARIABLE=boot_heater_bed_temp VALUE=0					# and clear val/flag for no-heat on followon resets
	{% endif %}

	{% if svv.boot_extruder_temp|int == 0 %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET=1		# set a mock temp on the HE, so the watercooling system starts
	{% endif %}

	M118 { "Config Z Endstop to Bed Distance: " ~ printer.configfile.config.stepper_z.position_endstop ~ "mm" }
	M118 { "Config Extruder Rotation Distance: " ~ printer.configfile.settings.extruder.rotation_distance ~ "mm" }
	
	UPDATE_DELAYED_GCODE ID=_advise_printer_state DURATION=0.01		# display status
	
	_proc_end function=printer_startup 
	
#----------------------------------------------------------------------------------

[delayed_gcode _advise_printer_state]
initial_duration: 0
gcode:

	_proc_start function=_advise_printer_state func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if svv.debug_err_flag 	== 0 and
		  svv.klicky_err_flag 	== 0 and
		  svv.ledeff_err_flag 	== 0 and
		  svv.linadv_err_flag 	== 0 and
		  svv.gcodeproc_err_flag == 0 and
		  svv.scrub_err_flag 	== 0 		%}
		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"started"'	# machine state save
		M118 Printer state: Ready
		say_wait S="Printer Ready"
	{% else %}
		M118 Printer state: NOT Ready - a module error is asserted:
		M118 - svv.debug_err_flag: {svv.debug_err_flag}
		M118 - svv.klicky_err_flag: {svv.klicky_err_flag}
		M118 - svv.ledeff_err_flag: {svv.ledeff_err_flag}
		M118 - svv.linadv_err_flag: {svv.linadv_err_flag}
		M118 - svv.gcodeproc_err_flag: {svv.gcodeproc_err_flag}
		M118 - svv.scrub_err_flag: {svv.scrub_err_flag}
		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"error"'	# machine state save
		say_wait S="ATTENTION! ATTENTION! Printer Start Up Error"
		say_wait S="Printer {printer.idle_timeout.state}"
	{% endif %}

	_proc_end function=_advise_printer_state 


########################################
# BED
########################################

[delayed_gcode __bed_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=__bed_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> __bed Loaded. <<<
		say "__bed Loaded"
	{% endif %}
	_proc_end function=__bed_loaded 

[bed_mesh]
mesh_min: 20, 20
mesh_max: 100, 100
algorithm: bicubic
bicubic_tension: .2
speed: 250
horizontal_move_z: 15
probe_count: 5,5
mesh_pps: 2,2
relative_reference_index: 12
fade_start: 1.0
fade_end: 10.0


[heater_bed]
heater_pin: gpio21
sensor_pin: gpio26
sensor_type: ATC Semitec 104GT-2
control: pid
pid_kp = 53.489
pid_ki = 2.110
pid_kd = 338.988
min_temp: 0
max_temp: 200

#--------------------------------------------------------------------

### [gcode_macro DO_BED_MESH]
### description: Heat bed and then perform a bed mesh sequence
### variable_bed_temp: 60
### variable_extruder_temp: 230
### gcode:
### 
### 	_proc_start function=DO_BED_MESH func_params='"{rawparams|string}"'  
### 
### 	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> DO_BED_MESH <<< {% endif %} 
### 	M117 Heating...
### 	M140 S{bed_temp}			   # set bed final temp
### 	M104 S{extruder_temp}		  # set extruder final temp
### 	M190 S{bed_temp}			   # wait for bed final temp
### 	M109 S{extruder_temp}		  # wait for extruder final temp
### 	
### 	
### 	{% if params.CHAMBER|default(45)|int > printer['temperature_fan Chamber'].temperature|int %}
### 		say_wait S="Waiting for chamber to come up to temp"
### 		M118 Waiting for chamber to come up to temp
### 		M191.1 S{params.CHAMBER|default(45)|int}			# wait for chamber to come up to temp before proceeding
### 	{% endif %}
### 
### 	say_wait S="Chamber is up to temp"
### 	M118 Chamber Heated Sufficiently
### 	
### 	
### 	
###   # _HOURMETER_ON
### 	_PrintLED_On
### 	M300
### 	_ENSURE_QGL							# homes if needed - need to have the gantry leveled
### 	
### 	BED_MESH_CALIBRATE
### 	G28
### 	M300
### 	M300
###   # _HOURMETER_OFF
### 	_PrintLED_Off
### 	SAVE_CONFIG		# this is for runtime updates to Klipper - pushes shite to the bottom of the printer.cfg
### 
### 	_proc_end function=DO_BED_MESH 
### 
### 


### ############################################################################
### #Bed mesh calibrate
### ############################################################################
### [gcode_macro BED_MESH_CALIBRATE]
### description: Perform [home,] [QGL, and] bed mesh leveling
### rename_existing: _BED_MESH_CALIBRATE_STOCK
### description: Perform Mesh Bed Leveling with klicky automount
### gcode:
### 
### 	_proc_start function=BED_MESH_CALIBRATE func_params='"{rawparams|string}"'  
### 
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshing"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshing <<< {% endif %}
### 	{% if printer["gcode_macro _User_Variables"].verbose %} M118 Bed Mesh Calibrate {% endif %}
### 
### 	_ENSURE_QGL							# homes if needed - need to have the gantry leveled
### 
### 	_CheckProbe action=query
### 	Attach_Probe
### 
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ BED_MESH_CALIBRATE_STOCK {rawparams} <<< {% endif %}
### 
### 	# having timer too close errors here with some software - while it could further exaserbate the issue, going to wrap FW proc w/ trace debug 
### 	# to see if FW code is calling any config procs to see if I can narrow in on if it is something that I've done in the configs that might be
### 	# contributing to the issues.
### 
### 	say_wait S="Collecting Bed Mesh"
### 
### #	enable_trace_debug
### 	_BED_MESH_CALIBRATE_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
### #	disable_trace_debug
### 
### 	say_wait S="Bed Mesh Collected"
### 
### 	Dock_Probe
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshed"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshed <<< {% endif %}
### 
### 	_proc_end function=BED_MESH_CALIBRATE 
### 
### ############################################################################
### # Quad Gantry Level
### ############################################################################
### [gcode_macro QUAD_GANTRY_LEVEL]
### rename_existing: _QUAD_GANTRY_LEVEL_STOCK
### description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount - rehomez z thereafter
### # consider supporting passage of a mesh parameter to activate after the QGL is completed.  Possibly in _ensure_gql (macros)
### gcode:
### 
### 	_proc_start function=QUAD_GANTRY_LEVEL func_params='"{rawparams|string}"'  
### 
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgling"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'g <<< {% endif %}
### 
###  	_ENSURE_HOMED
### 
### 	_CheckProbe action=query
### 	Attach_Probe
### 
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ QUAD_GANTRY_LEVEL_STOCK {rawparams} <<< {% endif %}
### 
### 	BED_MESH_CLEAR
### 	M118 ... Bed Mesh Cleared as part of QGL
### 	say_wait S="Cleared Bed Mesh to Level Gantry."
### 
### 	# having intermittent timer too close errors here with something (bad on LaFrite, intermittent on LePotato, very intermittent on Pi3B+
### 	# while it could further exaserbate the issue, going to wrap FW proc w/ trace debug to see if FW code is calling any config procs to 
### 	# see if I can narrow in on if it is something that I've done in the configs that might be contributing to the issues.
### 	# ... No joy, it didn't reveal anything.
### 
### #	enable_trace_debug
### 	_QUAD_GANTRY_LEVEL_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
### #	disable_trace_debug
### 
### 	say_wait S="Gantry Leveled"
### 
### 	Dock_Probe	
### 	
### 	# given we tweaked on the gantry, need to rehome Z for accuracy's sake	
### 	M118 Cleaning nozzle and rehoming Z after QGL
### 
### 	clean_nozzle
### 	
### 	G28 Z
### 	
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgled"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'd <<< {% endif %}
### 
### 	_proc_end function=QUAD_GANTRY_LEVEL 
### 
### ############################################################################
### # PROBE_Z_ACCURACY
### ############################################################################
### [gcode_macro PROBE_Z_ACCURACY]
### rename_existing: _PROBE_Z_ACCURACY_STOCK
### description: adapts an undocumented FW routine to test z_endstop accuracy
### 
### # adapted to instantiate a codified known end Z position as the FW doesn't do so
### 
### variable_entryexit_z:				15		# Z to go to before/after calibrating
### variable_entryexit_zrate:			900		# rate in mm/min for same before/after calibrating
### 
### gcode:
### 
### 	_proc_start function=PROBE_Z_ACCURACY func_params='"{rawparams|string}"'  
### 
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza-ing"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> pza'g <<< {% endif %}
### 	_ENSURE_QGL							# homes if needed - need to have the gantry leveled
### 	M117 PROBE_Z_ACCURACY
###  	G0 Z{entryexit_z} F{entryexit_zrate}
### 	_PROBE_Z_ACCURACY_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
###  	G0 Z{entryexit_z} F{entryexit_zrate}
### 	M117
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza-ed"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>>  PZA'd <<< {% endif %}
### 
### 	_proc_end function=PROBE_Z_ACCURACY 

#####################################################################
#  PRINT_END
#####################################################################

[delayed_gcode __print_end_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=__print_end_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> __print_end Loaded. <<<
		# Say S="__print_end Loaded"
	{% endif %}
	_proc_end function=__print_end_loaded 

[gcode_macro PRINT_END]
variable_retract_temp_min:		180			 # Minimum nozzle temperature to permit a retract. Otherwise, purge will not occur.
variable_print_end_scrub:		False
gcode:
	# this proc gets entered when a print completes naturally, so no need to logically assess moving Z before/after XY
	# like is done in Print_Cancel (can be cancelled from pause, or from a print)

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _enable_trace_debug REASON='"svverror"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_gmove_debug REASON='" ugh - Final Eject Too Much"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='"svverror"' {% endif %}

	_proc_start function=PRINT_END func_params='"{rawparams|string}"'  
	
	say_wait S="Print Ending"

	# wondering if this is contributing to the ercf timer too close issue.?.
	M220 S100														# set feedrate percentage to default
	M221 S100														# set speed percentage to default

	{% set th = printer.toolhead %}									# set context for printer.toolhead object

	{% set entry_ptr_state = svv.last_ptr_state %}					# store state for conditional use later herein

	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
		M118 >>> Print Ending - svv.maxz:{svv.maxz} th.z:{th.position.z|float} <<<
	{% endif %}

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ending"'	# machine state save

	######################### safe anti-stringing print-end wipe coords
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
	# {% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}	# because, OAAT/SEQ context

	SAVE_GCODE_STATE NAME=STATE_PRINT_END

	_reset_extruder													# zero the extruder
	{% if printer.extruder.temperature|int >= retract_temp_min|int %}
		G10				               ; retract filament
	{% else %}
		M118 No print_end retract due to Low Temp...
	{% endif %}
	go_absolute
	G0 X{x_safe} Y{y_safe} Z{z_safe} F10000							# move nozzle to remove stringing

	M400															# wait for buffer to clear

	########################  old park
	# ## {% set z_safe = [svv.maxz|float + 15, th.axis_maximum.z|float]|min|float %}
	# {% set z_safe = [(th.position.z|float + 15), th.axis_maximum.z|float]|min %}
	# G0 Z{z_safe} F6000  											# Move Up
	# G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y} F15000		# park nozzle at center rear

#	_park_head ENTRY='"{entry_ptr_state|string}"'
	_park_head ENTRY='print_ending'

	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

	M107															# turn off part cooling fan
	M117 Print Completed

	CLEAR_PAUSE						   								# reset the fw's pause state
	M118 PRINT_END @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}
	# SDCARD_RESET_FILE						   						# reset the fw's file state

	M300 P10 S1000													# sound off as print complete
	M300 P10 S2000
	M300 P10 S3000
	# _snd_PrintEnd

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ended"'						# machine state save
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0											# clear saved print dims
	SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1									# print state initialization
	SAVE_VARIABLE VARIABLE=v0_XXXX_slicer_check VALUE='"NULL"'						# clear slicer vitals
	SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'					# clear state variable

	printer_config_backup

	save_variable VARIABLE=print_end_unload  VALUE={params.UNLOAD|default(0)|int} 	# needed for _print_end_ui_unload
	
	# using delay here, so that FW print end dialog can happen before this UI Prompt.
	get_user_input_delay DELAY=1 PROMPT="Turn Heaters Off? (YES/no):" RCVR_MACRO=_print_end_ui_cooldown TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF=YES

	_proc_end function=PRINT_END 

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off
#	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
#	{% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}

[gcode_macro _print_end_ui_cooldown]
gcode:

	_proc_start function=_print_end_ui_cooldown func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if params.UI_INPUT == YES or
		  params.UI_INPUT == 'YES' or
		  params.UI_INPUT == "YES" or
		  params.UI_INPUT == '"YES"' %}
		TURN_OFF_HEATERS
		M118 Heaters Off.
	{% else %}
		M118 Heaters Left On.
	{% endif %}

	_print_end_summary

	_proc_end function=_print_end_ui_cooldown 

[gcode_macro _print_end_summary]
gcode:

	_proc_start function=_print_end_summary func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# emit dialog in console/on lcd
	M118 >>> Print Complete <<<
	M117 Print Complete
	say_wait S="Print Ended"

	SET_PIN PIN=_PWR_SW_LED VALUE=1

	get_user_input PROMPT="Unpload configs? (yes/NO):" RCVR_MACRO=_print_end_cfg_upload_query TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="NO"

	_proc_end function=_print_end_summary 


[gcode_macro _print_end_cfg_upload_query] 
gcode:

	_proc_start function=_print_end_cfg_upload_query func_params='"{rawparams|string}"'  

	{% if params.UI_INPUT == YES or
		  params.UI_INPUT == 'YES' or
		  params.UI_INPUT == "YES" or
		  params.UI_INPUT == '"YES"' %}
		M118 Config Upload scripts now require commit message of  
#		M118 
		M118 1 to 255 chars using USER ENTRY|STRING macro button.
		
		get_user_input prompt="USER STRING ENTRY: Keyin a GIT Commit Msg:" TYPE=str BOUNDS_LO=1 BOUNDS_HI=255 RCVR_MACRO=_print_end_cfg_upload_finish TO_PERIOD=120 TO_CYCL_DEF=3 TO_RESP_DEF="Printer Event - Automated Config Backup."

	{% else %}
		M118 Configs not pushed.
	{% endif %}

	_proc_end function=_print_end_cfg_upload_query 

[gcode_macro _print_end_cfg_upload_finish]
gcode:

	_proc_start function=_print_end_cfg_upload_finish func_params='"{rawparams|string}"'  

	RUN_SHELL_COMMAND CMD=backup_configs PARAMS='"{params.UI_INPUT}"'

	_proc_end function=_print_end_cfg_upload_finish






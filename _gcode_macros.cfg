#####################################################################
# 	Macros
#####################################################################

[gcode_macro _info_gcode_macros]
gcode:
	# todo...
	
#--------------------------------------------------------------------

[gcode_macro HOST_SHUTDOWN]
gcode:
 	_proc_start function=HOST_SHUTDOWN func_params='"{rawparams|string}"'  
 {action_call_remote_method("shutdown_machine")}
	_proc_end function=HOST_SHUTDOWN 

#--------------------------------------------------------------------

[gcode_macro HOST_REBOOT]
gcode:
	_proc_start function=HOST_REBOOT func_params='"{rawparams|string}"'  
  {action_call_remote_method("reboot_machine")}
	_proc_end function=HOST_REBOOT 

#--------------------------------------------------------------------

[gcode_macro M1170]
description:  workaround for fixing a zero-based layer display - slicer is zero-based, gray matter is 1-based...
# params = L=LAYERNUM T=TOTALLAYERS  Weirdly, while PS layer is 0-based, PS's total layer count is 1-based, and their gcode viewer is 1-based...
# sample slicer use: M1170 L[layer_num] T[total_layer_count]
# chose this approach vs. renaming stock M117, as M117 works otherwise - this addresses a specific slicer behaviour.
# also using this to report sd card/th position at each layer change (for disaster recovery) in console and saving
gcode:

	_proc_start function=M1170 func_params='"{rawparams|string}"'  
	
	{% set pvsd = printer.virtual_sdcard %}
	{% set ptp = printer.toolhead.position %}

#	M117 L:{(params.L|int + 1)|int}/{params.T|int}|{(printer.virtual_sdcard.progress*100)|round(2,'common')}%

	{% set lcd_layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int ~ "-" ~ (pvsd.progress*100)|round(2,'common') ~ "%" %}
	M117 {lcd_layer_chg_msg}
	Save_Variable VARIABLE=last_lcd_layer_chg_msg VALUE='"{lcd_layer_chg_msg}"'

	{% set layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int ~ "-S" ~ pvsd.file_position ~ " | " ~ (pvsd.progress*100)|round(2,'common') ~ "%: X" ~ ptp.x|round(3,'common') ~ " Y" ~ ptp.y|round(3,'common') ~ " Z" ~ ptp.z|round(3,'common') %}
	M118 {layer_chg_msg}
	Save_Variable VARIABLE=last_layer_chg_msg VALUE='"{layer_chg_msg}"'

	_proc_end function=M1170 

#--------------------------------------------------------------------

[gcode_macro M118]
description: To trap/wrap FW M118 w/ action_respond_info vs. FW's implementation (supports numeric/special char starts)
rename_existing: M118.1
gcode:
# nix'd proc start/end here - recursion...
#	_proc_start function=M118 func_params='"{rawparams|string}"'  
	{ action_respond_info(rawparams) }
#	_proc_end function=M118 

#--------------------------------------------------------------------

[gcode_macro M112]
description: test wrapper to see if queue bypass is possible - it is not in this manner
rename_existing: M112.1
gcode:

	_proc_start function=M112 func_params='"{rawparams|string}"'  

	{% if params.INJECT %} 
		#do process'g here?
		#save_variable VARIABLE=test_m112_inject	VALUE={printer.system_stats.cputime}
		{ action_respond_info("fired @ " ~ printer.system_stats.cputime) }
		# use  tail _globals.pvar -n75 -f in ssh session to see if update is immediate
	{% endif %}
	
	M112.1 {rawparams}

	_proc_end function=M112 

#--------------------------------------------------------------------

[gcode_macro power_off_printer]
description: Power off the printer
gcode:

	_proc_start function=power_off_printer func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_off_printer <<< {% endif %} 
	{action_call_remote_method("set_device_power",
								device="Printer",
								state="off")}

	_proc_end function=power_off_printer 

#--------------------------------------------------------------------

[gcode_macro go_absolute]
description: does a G90 - just for readability's sake
gcode:

	_proc_start function=go_absolute func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ABSOLUTE <<< {% endif %} 
	G90

	_proc_end function=go_absolute 

#--------------------------------------------------------------------

[gcode_macro go_relative]
description: does a G91 - just for readability's sake
gcode:

	_proc_start function=go_relative func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RELATIVE <<< {% endif %} 
	G91

	_proc_end function=go_relative 

#--------------------------------------------------------------------

[delayed_gcode delayed_printer_off]
#description: Power off the printer when/if timed out
initial_duration: 0.
gcode:

	_proc_start function=delayed_printer_off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> delayed_printer_off <<< {% endif %} 
	{% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready"%}
	power_off_printer
	 {% endif %}

	_proc_end function=delayed_printer_off 

#####################################################################
# 	Manually Disable Steppers
#####################################################################

[gcode_macro disable_steppers]
description: Disable Stepper Motors
gcode:

	_proc_start function=disable_steppers func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> disable_steppers <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0						# flag a z_axis_cal is not complete
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0							# init global var
	M18

	_proc_end function=disable_steppers 

#--------------------------------------------------------------------

[gcode_macro save_conf]
description: this is for runtime updates to Klipper - pushes shite to the bottom of the printer.cfg
gcode:

	_proc_start function=save_conf func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> save_conf <<< {% endif %} 
	SAVE_CONFIG

	_proc_end function=save_conf 

#####################################################################
# 	Other Shite
#####################################################################

[gcode_macro _ENSURE_HOMED]
description: Home only if needed - no wasted cycles/power
gcode:

	_proc_start function=_ENSURE_HOMED func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURING HOMED <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_home"'	# machine state save
	{% if "z" not in printer.toolhead.homed_axes %}
		# if z is homed, xy are explicitly homed as well
		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Homing {% endif %} 
		G28
		SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0		# since homed, flag a z_axis_cal (zcal.cfg) is not complete
	{% endif %}
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"home_checked"'	# machine state save
	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURED HOMED <<< {% endif %} 

	_proc_end function=_ENSURE_HOMED 

#--------------------------------------------------------------------

[gcode_macro _reset_extruder]
description: for readability - execute G92 E0
gcode:

	_proc_start function=_reset_extruder func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _reset_extruder <<< {% endif %} 
	G92 E0

	_proc_end function=_reset_extruder 

#--------------------------------------------------------------------

[gcode_macro M600]
######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

gcode:

	_proc_start function=M600 func_params='"{rawparams|string}"'  

    {% set X = params.X|default(175)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(50)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

	_proc_end function=M600 

#--------------------------------------------------------------------

[gcode_macro M204]
description: wrap FW proc to trap and make use of set_velocity_limit in a manner that I want
rename_existing: M204.1
gcode:

	_proc_start function=M204 func_params='"{rawparams|string}"'  
	
	{% set ext_move_accel = params.P|default(0)|int %}
	{% set tvl_move_accel = params.T|default(0)|int %}
	{% set all_move_accel = params.S|default(0)|int %}
	{% set retract_accel  = params.R|default(0)|int %}
	
	{% set max_accel_limit = printer.toolhead.max_accel %}
	
	{% if all_move_accel %}
		# S param passed - cap at max accel limit and do it
		{% if all_move_accel > max_accel_limit %}
			{% set all_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={all_move_accel} ACCEL_TO_DECEL={all_move_accel / 2}
	{% elif ext_move_accel and tvl_move_accel %}
		# P and T params passed - choose lesser of P and T, cap at max accel limit, and do it
		{% if ext_move_accel < tvl_move_accel %}
			{% set tgt_move_accel = ext_move_accel %}
		{% else %}
			{% set tgt_move_accel = tvl_move_accel %}
		{% endif %}
		{% if tgt_move_accel > max_accel_limit %}
			{% set tgt_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={tgt_move_accel} ACCEL_TO_DECEL={tgt_move_accel / 2}
	{% elif ext_move_accel and not tvl_move_accel %}
		# P not T params passed - cap P at max accel limit, and do it
		{% if ext_move_accel > max_accel_limit %}
			{% set ext_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={ext_move_accel} ACCEL_TO_DECEL={ext_move_accel / 2}
	{% elif tvl_move_accel and not ext_move_accel %}
		# T not P params passed - cap T at max accel limit, and do it
		{% if tvl_move_accel > max_accel_limit %}
			{% set tvl_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={tvl_move_accel} ACCEL_TO_DECEL={tvl_move_accel / 2}
	{% elif retract_accel %}
		# do nothing here
	{% else %}
		# do nothing here
	{% endif %}
	
	
	_proc_end function=M204 


[gcode_macro SAY]
gcode:
	_proc_start function=say func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %} 
	##	{% set utterance = params.S %}
	#	{% set utterance = rawparams|string|replace("s=", "") %}
	#	{% set utterance = "\'" ~ utterance|replace("S=", "") ~ "\'" %}
	##	RUN_SHELL_COMMAND CMD=say PARAMS='{utterance}'
		RUN_SHELL_COMMAND CMD=say PARAMS='{params.S}'
	{% endif %}
	_proc_end function=say 

#--------------------------------------------------------------------

[gcode_macro SAY_WAIT]
gcode:
	_proc_start function=say func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %} 
	##	{% set utterance = params.S %}
	#	{% set utterance = rawparams|string|replace("s=", "") %}
	#	{% set utterance = "\'" ~ utterance|replace("S=", "") ~ "\'" %}
	##	RUN_SHELL_COMMAND CMD=say_wait PARAMS='{utterance}'
		RUN_SHELL_COMMAND CMD=say_wait PARAMS='{params.S}'
	{% endif %}
	_proc_end function=say 

#--------------------------------------------------------------------

[gcode_macro FIRMWARE_RESTART]
description: wrap FW proc to save existing heat settings at a FIRMWARE_RESTART
RENAME_EXISTING: FIRMWARE_RESTART_STOCK
gcode:

	_proc_start function=FIRMWARE_RESTART func_params='"{rawparams|string}"'  
	
	{% set svv = printer.save_variables.variables %}
	
	# see if any heat is applied and, if so, flag for restoration at boot
	save_variable VARIABLE=boot_extruder_temp VALUE={svv.extruder_temp_setting}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={svv.heater_bed_temp_setting}
	
	say_wait S="Restarting Printer Firmware"
	
	FIRMWARE_RESTART_STOCK
	
	_proc_end function=FIRMWARE_RESTART 

#--------------------------------------------------------------------


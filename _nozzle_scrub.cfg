

[gcode_macro _nozzle_scrub_vars]

variable_deploy_angle:		48.0	# degrees
variable_stow_angle:		125.0	# degrees
		 
variable_deploy_minz:		45.0
variable_ztravel_speed:		25		# mm/s Z travel moves will be performed when running these macros
		 
variable_stowdeploy_x:		60.0
variable_stowdeploy_y:		120.0
variable_xytravel_speed:	200		# mm/s XY travel moves will be performed when running these macros
		 
variable_stroke_start_x:	0.0
variable_stroke_start_y:	85.0
		 
variable_stroke_end_x:		0.0
variable_stroke_end_y:		35.0
		 
variable_stroke_speed:		300		# mm/s XY stroke moves will be performed when running these macros

variable_full_strokes:		3

gcode:

[servo scrub_servo]
#######################################################################################
### Nozzle Scrub Brush/Purge Bucket Engagement Servo Motor ############################
#######################################################################################

# pin: host:gpiochip1/gpio81
# pin: host:gpiochip1/gpio82
pin: qtpy:PA16						# scrub brush
maximum_servo_angle: 180
minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0025

[gcode_macro deploy_brush]

# fixme: need to do gcode G0/G1 z move trap and stow brush if not stowed before moving z

gcode:

	SAVE_GCODE_STATE NAME=_noz_scrub_deploy

	{%set mod_vars = printer["gcode_macro _nozzle_scrub_vars"] %}
	{%set th = printer.toolhead %}

	force_stow_brush	# just to ensure it is stowed before doing anything

	_ENSURE_HOMED

	{% if th.position.z < mod_vars.deploy_minz %}
		go_absolute
		G0 Z{mod_vars.deploy_minz} F{mod_vars.ztravel_speed * 60}			
	{% endif %}

	go_absolute
	G0 X{mod_vars.stowdeploy_x} Y{mod_vars.stowdeploy_y} F{mod_vars.xytravel_speed * 60}

	SET_SERVO SERVO=scrub_servo ANGLE={mod_vars.deploy_angle}
	save_variable variable=scrub_brush_stowed value=0

	RESTORE_GCODE_STATE NAME=_noz_scrub_deploy

[gcode_macro stow_brush]
gcode:

	SAVE_GCODE_STATE NAME=_noz_scrub_stow

	{%set mod_vars = printer["gcode_macro _nozzle_scrub_vars"] %}
	{%set th = printer.toolhead %}

	go_absolute
	G0 X{mod_vars.stowdeploy_x} Y{mod_vars.stowdeploy_y} F{60*mod_vars.xytravel_speed}

	SET_SERVO SERVO=scrub_servo ANGLE={mod_vars.stow_angle}
	g4 p250															# wait for servo move to complete
	SET_SERVO SERVO=scrub_servo WIDTH=0.0							# disables the servo
	save_variable variable=scrub_brush_stowed value=1

	RESTORE_GCODE_STATE NAME=_noz_scrub_stow
	
[gcode_macro force_stow_brush]
gcode:

	{%set mod_vars = printer["gcode_macro _nozzle_scrub_vars"] %}

	SET_SERVO SERVO=scrub_servo ANGLE={mod_vars.stow_angle}
	g4 p250															# wait for servo move to complete
	SET_SERVO SERVO=scrub_servo WIDTH=0.0							# disables the servo
	save_variable variable=scrub_brush_stowed value=1

[gcode_macro _stroke_nozzle]
# assumes brush is deployed and toolhead at prescrub position
gcode:

	SAVE_GCODE_STATE NAME=_noz_scrub_stroke

	{%set mod_vars = printer["gcode_macro _nozzle_scrub_vars"] %}

	go_absolute
	G0 X{mod_vars.stroke_start_x}	Y{mod_vars.stroke_start_y}	F{mod_vars.xytravel_speed * 60}

	{% for wipes in range(0, mod_vars.full_strokes) %}
		G0 X{mod_vars.stroke_end_x}		Y{mod_vars.stroke_end_y}	F{mod_vars.stroke_speed * 60}
		G0 X{mod_vars.stroke_start_x}	Y{mod_vars.stroke_start_y}	F{mod_vars.stroke_speed * 60}
	{% endfor %}

	G0 X{mod_vars.stowdeploy_x}		Y{mod_vars.stowdeploy_y}	F{mod_vars.xytravel_speed * 60}

	RESTORE_GCODE_STATE NAME=_noz_scrub_stroke

[gcode_macro clean_nozzle]
# assumes brush isn't deployed - returns to entry xyz after scrub
# M400s ensure discreet movement sequencing (vs. queued moves, possibly leading to overlapped moves/undesired results)
gcode:

	SAVE_GCODE_STATE NAME=clean_nozzle

	{%set mod_vars = printer["gcode_macro _nozzle_scrub_vars"] %}
	{%set th = printer.toolhead %}

	# set a homed context flag
	{% set entry_z = -999 %}

	# and then set flag to actual value if homed
	{% if "z" in th.homed_axes %}
		{% set entry_z = th.position.z %}
	{% endif %}

	# do the scrub
	deploy_brush
	M400
	_stroke_nozzle
	M400
	stow_brush

	# restore the entry gcode context, moving only if the TH was homed on entry
	{% if entry_z != -999 %}
		# th was homed on entry - so restore the gcode context and move to the entry position
		RESTORE_GCODE_STATE NAME=clean_nozzle MOVE=1 MOVE_SPEED={mod_vars.xytravel_speed}	# move_speed is mm/s, NOT feedrate (mm/m)
	{% else %}
		# th wasn't homed, so just restore the gcode context and do not move the TH from the stowdeploy location
		# otherwise, it moves to X0, Y0, Z0 - which may be undesirable, I posit
		RESTORE_GCODE_STATE NAME=clean_nozzle
	{% endif %}

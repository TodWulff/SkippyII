#####################################################################
#  PAUSE
#####################################################################

[gcode_macro PRINT_END_x]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G10				               ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F7000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X{max_y} Y{max_y} F3600          ; park nozzle at right rear

#--------------------------------------------------------------------




[gcode_macro PRINT_END]
variable_retract_temp_min:		180			 # Minimum nozzle temperature to permit a retract. Otherwise, purge will not occur.
variable_print_end_scrub:		False
gcode:
	# this proc gets entered when a print completes naturally, so no need to logically assess moving Z before/after XY
	# like is done in Print_Cancel (can be cancelled from pause, or from a print)

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _enable_trace_debug REASON='"svverror"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_gmove_debug REASON='" ugh - Final Eject Too Much"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='"svverror"' {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PRINT_END func_params='"{rawparams|string}"'  {% endif %}

	# wondering if this is contributing to the ercf timer too close issue.?.
	M220 S100														# set feedrate percentage to default
	M221 S100														# set speed percentage to default

	{% set th = printer.toolhead %}									# set context for printer.toolhead object

	{% set entry_ptr_state = svv.last_ptr_state %}					# store state for conditional use later herein

	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
		M118 >>> Print Ending - svv.maxz:{svv.maxz} th.z:{th.position.z|float} <<<
	{% endif %}

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ending"'	# machine state save

	######################### safe anti-stringing print-end wipe coords
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
	# {% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}	# because, OAAT/SEQ context

	SAVE_GCODE_STATE NAME=STATE_PRINT_END

	_reset_extruder													# zero the extruder
	{% if printer.extruder.temperature|int >= retract_temp_min|int %}
		G10				               ; retract filament
	{% else %}
		M118 No print_end retract due to Low Temp...
	{% endif %}
	G0 X{x_safe} Y{y_safe} Z{z_safe} F10000							# move nozzle to remove stringing

	M400															# wait for buffer to clear

	########################  old park
	# ## {% set z_safe = [svv.maxz|float + 15, th.axis_maximum.z|float]|min|float %}
	# {% set z_safe = [(th.position.z|float + 15), th.axis_maximum.z|float]|min %}
	# G0 Z{z_safe} F6000  											# Move Up
	# G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y} F15000		# park nozzle at center rear

#	_park_head ENTRY='"{entry_ptr_state|string}"'
	_park_head ENTRY='print_ending'

	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

	M107															# turn off part cooling fan
	M117 Print Completed
	M106 S26														# forces small breeze across duct mounted chamber temp sensor
#	M141 S40														# set chamber temp to 40 to help cool it down

	CLEAR_PAUSE						   								# reset the fw's pause state
	M118 PRINT_END @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
	# SDCARD_RESET_FILE						   						# reset the fw's file state

	M300 P10 S1000													# sound off as print complete
	M300 P10 S2000
	M300 P10 S3000
	# snd_PrintEnd

#	{% if svv.module_ledeff_loaded %}
#		_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1	# uses LED_EFFECTS code
#		_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1	# uses LED_EFFECTS code
#		; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1	# uses LED_EFFECTS code
#		; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1	# uses LED_EFFECTS code
#	{% else %}
#		ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
#		LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
#		; ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
#		; DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
#	{% endif %}

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ended"'						# machine state save
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0											# clear saved print dims
	SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1									# print state initialization
	SAVE_VARIABLE VARIABLE=v0_XXXX_slicer_check VALUE='"NULL"'						# clear slicer vitals
	SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'					# clear state variable
#	SAVE_VARIABLE VARIABLE=ercf_swaps_last_complete_print VALUE={svv.ercf_swaps}	# save current swaps
#	SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0										# clear swap

	# printer_config_backup

	save_variable VARIABLE=print_end_unload  VALUE={params.UNLOAD|default(0)|int} 	# needed for _print_end_ui_unload
	get_user_input PROMPT="Turn Heaters Off? (YES/no):" RCVR_MACRO=_print_end_ui_cooldown TO_PERIOD=30 TO_CYCL_DEF=0 TO_RESP_DEF="YES"

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PRINT_END {% endif %}

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off
#	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
#	{% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}

[gcode_macro _print_end_ui_cooldown]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_print_end_ui_cooldown func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if params.UI_INPUT == '"YES"' %}
		TURN_OFF_HEATERS
		M118 Heaters Off.
	{% else %}
		M118 Heaters Left On.
	{% endif %}

	{% if svv.module_ercf_loaded|int %}
		{% if svv.print_end_unload %}
			get_user_input PROMPT="Unload Filament? (YES/no):" RCVR_MACRO=_print_end_ui_unload TO_PERIOD=30 TO_CYCL_DEF=0 TO_RESP_DEF="YES"
			# _print_end_ui_unload chains to _print_end_summary
		{% else %}
			_print_end_summary
		{% endif %}
	{% else %}
		_print_end_summary
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_print_end_ui_cooldown {% endif %}

[gcode_macro _print_end_ui_unload]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_print_end_ui_unload func_params='"{rawparams|string}"'  {% endif %}

	{% if params.UI_INPUT == '"YES"' %}
		M118 Unloading Filament...
		{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0		#nix ercf encoder_sensor ops at end so unload doesn't trip a pause.
		{% endif %}
		ERCF_EJECT FINAL=1		#and do the eject
		M118 Filament unloaded.
	{% else %}
		M118 Filament load retained.
	{% endif %}

	_print_end_summary

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_print_end_ui_unload {% endif %}

[gcode_macro _print_end_summary]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_print_end_summary func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# emit dialog in console/on lcd
	# {% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
#	{% if 1 %}
#		{% if svv.module_ercf_loaded %}
#			{% if svv.ercf_swaps_last_complete_print > 1 %}
#				M118 { ">>> Print Complete - " ~ svv.ercf_swaps_last_complete_print ~ " swaps with " ~ svv.ercf_interactions ~ " interactions. <<<" }
#				M117 Done - {svv.ercf_swaps_last_complete_print} swaps.
#			{% else %}
#				{% if svv.ercf_interactions %}
#					M118 { ">>> Print Complete - " ~ svv.ercf_swaps_last_complete_print ~ " swaps with 1 interactions. <<<"  }
#				{% else %}
#					M118 { ">>> Print Complete - " ~ svv.ercf_swaps_last_complete_print ~ " swaps with no interactions. <<<"  }
#				{% endif %}
#				M117 Done - {svv.ercf_swaps_last_complete_print} swap.
#			{% endif %}
#		{% else %}
			M118 >>> Print Complete <<<
			M117 Print Complete
#		{% endif %}
#	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_print_end_summary {% endif %}





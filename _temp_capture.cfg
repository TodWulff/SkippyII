#####################################################################
#  Temp setting captures
#####################################################################

[delayed_gcode _temp_capture_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_temp_capture_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> _temp_capture Loaded. <<<
		# Say S="_temp_capture Loaded"
	{% endif %}
	_proc_end function=_temp_capture_loaded 

#--------------------------------------------------------------------

[gcode_macro M104]
description:  capture and set target HE temp, non-blocking
rename_existing: M104.1
gcode:

	_proc_start function=M104 func_params='"{rawparams|string}"' 

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}
	
	M104.1 {rawparams}
	
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	{% if svv.last_ptr_state != "early_start" %}
		say_wait S="Extruder temp {params.S|int}"
	{% endif %}

	_proc_end function=M104 

#--------------------------------------------------------------------

[gcode_macro M140]
description:  capture and set target heater_bed temp, non-blocking
rename_existing: M140.1
gcode:

	_proc_start function=M140 func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	M140.1 {rawparams}
	
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	{% if svv.last_ptr_state != "early_start" %}
		say_wait S="Bed Temp {params.S|int}"
	{% endif %}

	_proc_end function=M140 


#--------------------------------------------------------------------

[gcode_macro M109]
# this is blocking on heater temp attainment
description:  capture and set target HE temp, waiting for temp attainment
rename_existing: M109.1
gcode:

	_proc_start function=M109 func_params='"{rawparams|string}"'   

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}
	
	
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	{% if svv.last_ptr_state != "early_start" %}
		say_wait S="Extruder heating to {params.S|int}"
	{% endif %}
	
	M109.1 {rawparams}

	_proc_end function=M109 

#--------------------------------------------------------------------

[gcode_macro M190]
description:  capture and set target heater_bed temp, waiting for temp attainment
# this is blocking on heater temp attainment
rename_existing: M190.1
gcode:

	_proc_start function=M190 func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	{% if svv.last_ptr_state != "early_start" %}
		say_wait S="Bed heating to {params.S|int}"
	{% endif %}
	
	M190.1 {rawparams} 

	_proc_end function=M190 

#--------------------------------------------------------------------

[gcode_macro M106]
description:  capture and set PCF Setting
rename_existing: M106.1
gcode:

	_proc_start function=M106 func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=pcf_setting VALUE={params.S|int}	# provisional
	save_variable VARIABLE=boot_pcf VALUE={params.S|int}	# provisional
	
	M106.1 {rawparams}
	say S="PCF {((params.S|int/255)*100)|int} percent"

	_proc_end function=M106 

#--------------------------------------------------------------------

[gcode_macro M191.1]
description:  capture and set target chamber temp, waiting for temp attainment
variable_min_bed_tmp:		60
variable_min_he_tmp:		180
variable_min_chamb_tmp:		40
variable_max_chamb_tmp:		60
# param S = chamber heat temp setting
gcode:

	_proc_start function=M191.1 func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	{% set th = printer.toolhead %}									# set eazy accesss context for printer.toolhead object

	
	{% set S = params.S | default(0) | float %}

	# this is a fully blocking proc.  As such, we need to ensure that 
	# the relevant heaters are on - namely bed and extruder
	# and that the chamber temp setting is w/in reasonable bounds
	
#	M118 M191.1 S 	min:{min_chamb_tmp}		set:{S}		max:{max_chamb_tmp}
#	M118 Bed: min:{min_bed_tmp} 	set:{svv.heater_bed_temp_setting}	act:{printer.heater_bed.temperature}
#	M118 Ext: min:{min_he_tmp} 		set:{svv.extruder_temp_setting}		act:{printer.extruder.temperature}	

	{% if	S <= max_chamb_tmp							and
			S >= min_chamb_tmp							and
			svv.extruder_temp_setting >= min_he_tmp		and
			svv.heater_bed_temp_setting >= min_bed_tmp 
			%}
			
		SAVE_VARIABLE VARIABLE=chamber_temp_setting VALUE={params.S|int}
		M118 Waiting for Chamber to heat to {S}°C
		say_wait S="Chamber Temp Hold Until {S|int}"
		TEMPERATURE_WAIT SENSOR="temperature_fan Chamber" MINIMUM={S}
		M118 Chamber heated to {printer['temperature_fan Chamber'].temperature}°C.
		say_wait S="Chamber Temp Attained"

	{% else %}

		M118 Chamber Temp Params out of bounds - continuing...
		say_wait S="ATTENTION! Chamber Temp Bypass!"

	{% endif %}

	_proc_end function=M191.1 

#--------------------------------------------------------------------

[gcode_macro SET_HEATER_TEMPERATURE]
description:  capture and set target bed temp, waiting for temp attainment
rename_existing: _SET_HEATER_TEMPERATURE_STOCK
gcode:

	_proc_start function=SET_HEATER_TEMPERATURE func_params='"{rawparams|string}"'  

	_SET_HEATER_TEMPERATURE_STOCK {rawparams} 
	SAVE_VARIABLE VARIABLE={params.HEATER|string|lower}_temp_setting VALUE={params.TARGET|int}
	save_variable VARIABLE=boot_{params.HEATER|string|lower}_temp VALUE={params.TARGET|int}
	
	UPDATE_DELAYED_GCODE ID=Report_Temps DURATION=0.25
	# this is a bit of a hack to allow closely timed setting of both bed and extruder while only speaking
	# the temps out once, after both are set (as long as they are set w/in <0.25 seconds of one another
	# might add logic below to not speak a specific setting if no change.?.

	_proc_end function=SET_HEATER_TEMPERATURE 

#--------------------------------------------------------------------

[delayed_gcode Report_Temps]
# description: helps with naturalizing reporting of temps as I like them, and together after both are set successively
# instead of 'One Hundred Twenty', this emits 'One Twenty' - moar terse = bettar...
# added logic to tract last reported temps so if redundant settings happen, don't report/say the non-different ones
initial_duration: 0
gcode:

	_proc_start function=Report_Temps func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% set eTemp = svv.extruder_temp_setting|int %}					# set eTemp val for conditional reporting
	{% set bTemp = svv.heater_bed_temp_setting|int %}				# set bTemp val for conditional reporting
	 
	{% set last_bed_tmp_rpt = svv.last_bed_tmp_rpt|int %}			# get last reported btemp for use in conditionals
	{% set last_ext_tmp_rpt = svv.last_ext_tmp_rpt|int %}			# get last reported etemp for use in conditionals
	
# make tts drop the hundred for non-even-hundred temp callouts

	{% if eTemp|int > 300 %}
		# nix left digit and replay with three - three30
		{% set eTemp2 = (eTemp|int-300)|string %}
		{% if eTemp2 < 10 %}
			{% set eTemp2 = ("oh " ~ eTemp2)|string %}
		{% endif %}
		{% set eTemp2 = ("three " ~ eTemp2)|string %}
	{% elif eTemp|int == 300 %}
		{% set eTemp2 = (eTemp|int)|string %}
	{% elif eTemp|int > 200 %}
		# nix left digit and replay with two - two20
		{% set eTemp2 = (eTemp|int-200)|string %}
		{% if eTemp2 < 10 %}
			{% set eTemp2 = ("oh " ~ eTemp2)|string %}
		{% endif %}
		{% set eTemp2 = ("two " ~ eTemp2)|string %}
	{% elif eTemp|int == 200 %}
		{% set eTemp2 = (eTemp|int)|string %}
	{% elif eTemp|int > 100 %}
		# nix left digit and replay with one - one80
		{% set eTemp2 = (eTemp|int-100)|string %}
		{% if eTemp2 < 10 %}
			{% set eTemp2 = ("oh " ~ eTemp2)|string %}
		{% endif %}
		{% set eTemp2 = ("one " ~ eTemp2)|string %}
	{% elif eTemp|int <= 100 %}
		{% set eTemp2 = (eTemp|int)|string %}
	{% endif %}

	{% if bTemp|int > 300 %}
		# nix left digit and replay with three - three30
		{% set bTemp2 = (bTemp|int-300)|string %}
		{% if bTemp2 < 10 %}
			{% set bTemp2 = ("oh " ~ bTemp2)|string %}
		{% endif %}
		{% set bTemp2 = ("three " ~ bTemp2)|string %}
	{% elif bTemp|int == 300 %}
		{% set bTemp2 = (bTemp|int)|string %}
	{% elif bTemp|int > 200 %}
		# nix left digit and replay with two - two20
		{% set bTemp2 = (bTemp|int-200)|string %}
		{% if bTemp2 < 10 %}
			{% set bTemp2 = ("oh " ~ bTemp2)|string %}
		{% endif %}
		{% set bTemp2 = ("two " ~ bTemp2)|string %}
	{% elif bTemp|int == 200 %}
		{% set bTemp2 = (bTemp|int)|string %}
	{% elif bTemp|int > 100 %}
		# nix left digit and replay with one - one80
		{% set bTemp2 = (bTemp|int-100)|string %}
		{% if bTemp2 < 10 %}
			{% set bTemp2 = ("oh " ~ bTemp2)|string %}
		{% endif %}
		{% set bTemp2 = ("one " ~ bTemp2)|string %}
	{% elif bTemp|int <= 100 %}
		{% set bTemp2 = (bTemp|int)|string %}
	{% endif %}

	{% if last_bed_tmp_rpt != bTemp and last_ext_tmp_rpt != eTemp %}			# both different
		klipper_console_echo S="Extruder: {eTemp|string},  Bed: {bTemp|string}"	# report new temp settings
		say_wait_nc S="Extruder: {eTemp2|string},  Bed: {bTemp2|string}"		# say new temp settings
		SAVE_VARIABLE VARIABLE=last_bed_tmp_rpt		VALUE={bTemp}				# save reported btemp
		SAVE_VARIABLE VARIABLE=last_ext_tmp_rpt		VALUE={eTemp}				# save reported etemp
	{% elif last_ext_tmp_rpt != eTemp %}										# not both, see if etemp different
		klipper_console_echo S="Extruder: {eTemp|string}"						# report new etemp setting
		say_wait_nc S="Extruder: {eTemp2|string}"								# say new etemp setting
		SAVE_VARIABLE VARIABLE=last_ext_tmp_rpt		VALUE={eTemp}				# save reported etemp
	{% elif last_bed_tmp_rpt != bTemp %}										# so not both, and not e diff, so see if b differs
		klipper_console_echo S="Bed: {bTemp|string}"							# report new btemp setting
		say_wait_nc S="Bed: {bTemp2|string}"									# say new btemp setting
		SAVE_VARIABLE VARIABLE=last_bed_tmp_rpt		VALUE={bTemp}				# save reported btemp
	{% else %} 																	# hmm, must be redundant setting.?.
		# so we fell through as this b/etemp settings match last, so report nothing?
		# OR possibly report verified or some such shite.
		klipper_console_echo S="Verified Temps: Extruder: {eTemp|string},  Bed: {bTemp|string}"	# report
		say_wait_nc S="Temps Verified"											# say temps verified diff
	{% endif %}

	_proc_end function=Report_Temps 

#--------------------------------------------------------------------



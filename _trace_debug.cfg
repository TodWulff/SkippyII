#####################################################################
#  code flow / trace debugging
#####################################################################

[delayed_gcode _trace_debug_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_trace_debug_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> _trace_debug Loaded. <<<
		# Say S="_trace_debug Loaded"
	{% endif %}
	_proc_end function=_trace_debug_loaded 

[gcode_macro _proc_start]
description:  for trace debug purposes - presents depth as leading back-tics
# passed params:
#	function=_some_macro_name
#	func_params='"{rawparams|string}"'		#<-- can have spaces (i.e. multiple paramaters) thus need to encapsulate as string
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} 

		{% set svv = printer.save_variables.variables %}					# set eazy accesss context for save_variables object
		
		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth + 1|int}	# increment depth counter

		{% set this1 = namespace(depth_indent = "`") %} 					# btic is proc_depth indicator
																			# using namespace so it can be manipulated in for loop
		{% for iter in range(svv.proc_depth|int) %}
			{% set this1.depth_indent = this1.depth_indent + "`" %}			# add a btic for each layer of nested code
		{% endfor %}

		{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %}
			{% set new_params = rawparams|replace("function=", "") %}		# strip function= from passed params 
			{% set new_params = new_params|replace("func_params=", "") %}	# strip func_params=
			{% set new_params = new_params|replace("'", "") %}				# strip ' portion of string encapsulation
			{% set new_params = new_params|replace("\"", "") %}				# strip " portion of string encapsulation
			M118 {this1.depth_indent ~ " " ~ new_params|upper}				# concatenate depth btics and (macro and params) and display in console
		{% endif %}
		
	{% endif %}


#--------------------------------------------------------------------

[gcode_macro _proc_end]
description:  for trace debug purposes - presents depth as leading back-tics
#	function=_some_macro_name
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} 

		{% set svv = printer.save_variables.variables %}						# set eazy accesss context for save_variables object

		{% set this1 = namespace(depth_indent = "`") %} 						# proc_depth
		
		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth - 1|int}	# decrement depth counter
		
		{% if svv.proc_depth|int < 0 %}
			_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0						# in theory, we should never get here...
		{% endif %}
		
		{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow or params.FORCE|default(0)|int %} 
		
			{% for iter in range(svv.proc_depth - 1|int) %}
				{% set this1.depth_indent = this1.depth_indent ~ "`" %}
			{% endfor %}
			
			{% if printer["gcode_macro _printer_vars"].show_proc_exit %} 
			
				{% if params.FUNCTION|string != "" and printer["gcode_macro _printer_vars"].show_proc_exit_details %} 
	#				M118 {this1.depth_indent ~ " " ~ params.FUNCTION ~ " End"}
	#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "]"}
	#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] exit"}
					M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] done"}
				{% else %}
					M118 {this1.depth_indent}
				{% endif %}

				# add a null line in the event we're no longer nested to depict a 'back to MAIN' context
				{% if this1.depth_indent == "`" %}
					M118
				{% endif %}
				
			{% endif %}
			
		{% endif %}
		
	{% endif %}

#--------------------------------------------------------------------

[gcode_macro _enable_trace_debug]
description: helper macro to set codeflow verbosity flag and inits depth counter - don't call directly - use ENABLE_CODE_TRACE
# accepts DEPTH=n to init depth - if known, caller can pass it.
gcode:
	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(0)|int %} # silence console emissions if already enabled

	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=1
		
	{% if entry_trace_enabled_flag == 0 %}	# emit a couple of blank lines to visually indicate state change
#		M118
		M118
	{% endif %}

	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={params.DEPTH|default(0)|int}	# init process depth counter
	## note: proc depth counter may be out of sync until un-nested fully and then will get sync'd up
	## as, at time of enablement, when not previously tracked, depth is unknown - user can pass DEPTH to force it
	## but if forced to a depth greather then code actually is, will never get to 'MAIN' depth of 0...
	

	#emit a mock annunciation of the calling proc (ENABLE_CODE_TRACE)

	_proc_start function=ENABLE_CODE_TRACE func_params='"{rawparams|string}"'
	_proc_start function=_enable_trace_debug func_params='"{rawparams|string}"'
		
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_trace_debug <<<<< {% endif %}
	say_wait S="Code Trace Debug Enabled"

	_proc_end function=_enable_trace_debug

#--------------------------------------------------------------------

[gcode_macro _disable_trace_debug]
description: helper macro to set codeflow verbosity flag and inits depth counter - don't call directly - use DISABLE_CODE_TRACE
gcode:

	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(1)|int  %} # silence console emissions if already disabled

	_proc_start function=_disable_trace_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_trace_debug <<<<< {% endif %}

	say_wait S="Code Trace Debug Disabled"
	
	_proc_end function=_disable_trace_debug 
	
	{% if entry_trace_enabled_flag %}	# emit a couple of blank lines to visually indicate state change
		_proc_end function=DISABLE_CODE_TRACE FORCE=1
#		M118
#		M118
	{% endif %}

	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=0
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0	# reset depth counter

#--------------------------------------------------------------------

[gcode_macro enable_code_trace]
description: passes raw params that should only include a DEPTH=n, if known.
gcode:
	_proc_start function=enable_code_trace func_params='"{rawparams|string}"'
	_enable_trace_debug {rawparams}		# speaks
	_proc_end function=enable_code_trace

#--------------------------------------------------------------------

[gcode_macro disable_code_trace]
description:
gcode:
	_proc_start function=disable_code_trace func_params='"{rawparams|string}"'
	_disable_trace_debug	# speaks
	_proc_end function=disable_code_trace

